<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>慌</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.慌.com/"/>
  <updated>2020-04-25T15:24:15.550Z</updated>
  <id>http://www.慌.com/</id>
  
  <author>
    <name>Paix Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dart Event loop</title>
    <link href="http://www.慌.com/2020/04/25/Dart-Event-loop/"/>
    <id>http://www.慌.com/2020/04/25/Dart-Event-loop/</id>
    <published>2020-04-25T12:11:30.000Z</published>
    <updated>2020-04-25T15:24:15.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dart-Event-loop"><a href="#Dart-Event-loop" class="headerlink" title="Dart Event loop"></a>Dart Event loop</h1><p>在 Java 中，我们可以通过 Thread 类起一个新线程来执行异步任务，但Dart是单线程的，Dart中主要通过 isolate 和 event loop 来执行异步任务。</p><h2 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h2><p>Isolate 相当于 Java 中的进程，完全独立于主 Isolate 运行，占用独立的内存空间，可以通过“消息”实现数据传递。</p><h2 id="Event-loop"><a href="#Event-loop" class="headerlink" title="Event loop"></a>Event loop</h2><p>可以把 event loop 想象成一条传送带，一旦有新的事件被放到上面，就会开始按顺序处理。</p><p>事件可以是用户输入，用户点击，Timer等，如图：</p><p><img src="/images/event-loop-example.png" alt=""></p><h2 id="MicroTask-queue-和-Event-queue"><a href="#MicroTask-queue-和-Event-queue" class="headerlink" title="MicroTask queue 和 Event queue"></a>MicroTask queue 和 Event queue</h2><p>在 Event loop 中有两种队列，MicroTask queue 和 Event queue。</p><p>MicroTask queue 和 Event queue 的执行顺序如下图</p><p><img src="/images/both-queues.png" alt=""></p><p>先执行main中的同步代码，然后执行MicroTask queue中的代码，最后是Event queue中的代码，并且在每执行完一个 event 后，都会去查看 MicroTask queue 中时候有需要执行的代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Dart-Event-loop&quot;&gt;&lt;a href=&quot;#Dart-Event-loop&quot; class=&quot;headerlink&quot; title=&quot;Dart Event loop&quot;&gt;&lt;/a&gt;Dart Event loop&lt;/h1&gt;&lt;p&gt;在 Java 中，我们可以通过 Th
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Google Technical Writing Course 笔记</title>
    <link href="http://www.慌.com/2020/04/20/Google%20Technical%20Writing%20Course/"/>
    <id>http://www.慌.com/2020/04/20/Google%20Technical%20Writing%20Course/</id>
    <published>2020-04-20T15:53:54.000Z</published>
    <updated>2020-04-25T12:29:32.869Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developers.google.com/tech-writing" target="_blank" rel="noopener">Google Technical Writing Course</a> 从用词、句子、段落等方面提高读者的技术文档写作能力。</p><a id="more"></a><h2 id="用词"><a href="#用词" class="headerlink" title="用词"></a>用词</h2><ul><li><p><strong>定义对于目标读者是新的或不熟悉的单词</strong></p><p>如果单词在某个地方有详细解释，链接到那里。</p><p>如果文档本身是在介绍它，给它明确的定义。如果这种单词很多，放在术语章节中。</p></li><li><p><strong>使用一致的用词</strong></p><p>中途修改代码中的变量名会导致代码无法成功编译，文档也是。</p><p>如果某个名称太长，需要在下文使用缩写，可以加括号说明，如：</p><blockquote><p><strong>Protocol Buffers</strong> (or <strong>protobufs</strong> for short) provide their own definition language. Blah, blah, blah. And that’s why protobufs have won so many county fairs.</p></blockquote></li><li><p><strong>使用缩写</strong></p><p>使用某个名词的缩写前，先用粗体写明全称，如：</p><blockquote><p>This document is for engineers who are new to the <strong>Telekinetic Tactile Network</strong> (<strong>TTN</strong>) or need to understand how to order TTN replacement parts through finger motions.</p></blockquote><p>虽然使用缩写可以减短文章篇幅，但读者阅读时需要在大脑中转换成全称，增加了阅读成本。</p><p>使用缩写时应遵循以下两条规则：</p><ul><li>若文中很少用到，不要使用缩写。</li><li>缩写明显短于全称并在文中多次出现，可以使用缩写。</li></ul></li><li><p><strong>使用代词</strong></p><p>慎用代词，代词会让文章语义不清。</p><p>名词和代词之间距离应尽量近，如果名词和代词之间超过五个单词，考虑用名词，而不是代词。</p><p>如果名词和它的代词之间还有一个其他名词，使用名词，而不是代词。</p></li></ul><h2 id="主动句"><a href="#主动句" class="headerlink" title="主动句"></a>主动句</h2><ul><li><strong>避免使用被动句</strong>。</li></ul><p>​    读者需要在大脑中把被动句改为主动句，增加了阅读成本。</p><p>​    主动句比被动句表达的意思更清晰。</p><p>​    被动句经常省略主语，读者需要去猜测主语是什么。</p><p>​    主动句通常比被动句更短。</p><h2 id="清楚的句子"><a href="#清楚的句子" class="headerlink" title="清楚的句子"></a>清楚的句子</h2><ul><li><p><strong>使用”强烈“的动词</strong></p><p>动词在句子中扮演很重要的角色，为了加深句子表达的意思，我们应使用”strong“的动词，而不是”weak“的。</p><table><thead><tr><th>Weak Verb</th><th>Strong Verb</th></tr></thead><tbody><tr><td>The error <strong>occours</strong> when clicking the Submit button.</td><td>Clicking the submit button <strong>triggers</strong> the error.</td></tr><tr><td>This error message <strong>happens</strong> when …</td><td>The system <strong>generates</strong> this error message when…</td></tr><tr><td>We <strong>are</strong> very careful to ensure …</td><td>We carefully <strong>ensure</strong> …</td></tr></tbody></table></li><li><p><strong>少用 there is / there are</strong></p><ul><li><p>there is / there are 是一个太过宽泛普通的词，你应该给句子指定明确的名词和动词，如：</p><blockquote><p>There is a variable called <code>met_trick</code> that stores the current accuracy.</p></blockquote><p>应该改为</p><blockquote><p>A variable named <code>met_trick</code> stores the current accuracy. </p><p>The <code>met_trick</code> variable stores the current accuracy.</p></blockquote></li><li><p>有时可以通过把真实的主语和动词移到句子前面以减少 there is / there are 的使用，如：</p><blockquote><p>There are two disturbing facts about Perl you should know.</p></blockquote><p>使用 You 加强语句后</p><blockquote><p>You should know two disturbing fact about Prel.</p></blockquote></li><li><p>在没有主语的句子里，创造一个主语使句子语义更清晰。</p><blockquote><p>There is no guarantee that the updates will be received in sequential order.</p></blockquote><p>改为</p><blockquote><p>Clients might not receive the updates in sequential order.</p></blockquote></li></ul></li></ul><h2 id="简短的句子"><a href="#简短的句子" class="headerlink" title="简短的句子"></a>简短的句子</h2><p>文档简短有三点好处：更快阅读，更易维护，更少错误。</p><ul><li>一个句子只表达一个意思</li><li>把长句改为列表</li><li>消除无关单词</li><li>减少从句</li></ul><h2 id="列表和表格"><a href="#列表和表格" class="headerlink" title="列表和表格"></a>列表和表格</h2><ul><li><p><strong>选择正确的列表类型</strong></p><p>无序列表 OR 有序列表。</p></li><li><p><strong>保证列表子项”平行“</strong></p><p>语法，大小写，逻辑分类，标点符号 保持一致。</p></li><li><p><strong>恰当地使用标点符号</strong></p><p>如果子项是句子，则使用正确的大小写和标点符号。如果不是，不要加标点符号。</p></li><li><p><strong>有序列表开头使用必要的动词</strong></p><p>如 start、open，并遵顼”平行“的原则。</p></li><li><p><strong>创建有用的表格</strong></p><p>每列的头都应该清楚，有意义。</p><p>格子中的文字不要太多。</p></li><li><p><strong>介绍每个列表和表格</strong></p><p>给每个列表和表格简单说明，并以冒号结尾。</p></li></ul><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><ul><li><p><strong>写一个好的开头</strong></p><p>好的开头阐明本段的中心论点。</p></li><li><p><strong>每个段落集中说明一个单独的观点</strong></p></li><li><p><strong>别让段落太长或太短</strong></p><p>太长的段落看起来“吓人”。每段最好控制在三五行。</p><p>太多短段落会让文档看起来杂乱。</p></li><li><p><strong>好的段落回答了三个问题</strong></p><p>What 你在试图告诉读者什么。</p><p>Why 为什么知道这些对于读者很重要。</p><p>How 读者如何使用这些知识。</p></li></ul><h2 id="读者"><a href="#读者" class="headerlink" title="读者"></a>读者</h2><p>好文档 = 读者做某事需要知道的知识 - 读者已知的知识。</p><ul><li><strong>定义你的读者</strong></li><li><strong>决定你的读者需要学到什么</strong></li><li><strong>让文档适合你的读者</strong></li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><p>声明文档的范围</p><p>在文档开头说明，本文档包含什么内容，不包含什么内容。 </p></li><li><p>声明读者范围</p><p>本文档为谁而写，适合哪些人。</p></li><li><p>概要</p><p>长文开头要阐明文档的中心论点，回答读者的问题。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/tech-writing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Technical Writing Course&lt;/a&gt; 从用词、句子、段落等方面提高读者的技术文档写作能力。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>明天开始</title>
    <link href="http://www.慌.com/2020/04/19/%E6%98%8E%E5%A4%A9%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.慌.com/2020/04/19/%E6%98%8E%E5%A4%A9%E5%BC%80%E5%A7%8B/</id>
    <published>2020-04-19T14:38:54.000Z</published>
    <updated>2020-04-19T14:40:02.883Z</updated>
    
    <content type="html"><![CDATA[<p>明天</p><p>开始</p><p>写博客</p><p>其实就是做笔记</p><p>但是做笔记</p><p>思考不够</p><p>写想法吧</p><p>又没啥想法</p><p>写说明更恰当一些</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;明天&lt;/p&gt;
&lt;p&gt;开始&lt;/p&gt;
&lt;p&gt;写博客&lt;/p&gt;
&lt;p&gt;其实就是做笔记&lt;/p&gt;
&lt;p&gt;但是做笔记&lt;/p&gt;
&lt;p&gt;思考不够&lt;/p&gt;
&lt;p&gt;写想法吧&lt;/p&gt;
&lt;p&gt;又没啥想法&lt;/p&gt;
&lt;p&gt;写说明更恰当一些&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
